This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
backend/
  api/
    __init__.py
    photos.py
  utils/
    __init__.py
    exif.py
    hashing.py
    image_variants.py
    storage.py
  __init__.py
  config.py
  database.py
  deps.py
  Dockerfile
  main.py
  models.py
  repomix-output.xml
  requirements.txt
  schemas.py
site/
  public/
    vite.svg
  src/
    assets/
      react.svg
    components/
      Gallery.jsx
      Photo.jsx
    App.jsx
    index.css
    main.jsx
    Management.jsx
    utils.js
  .gitignore
  Dockerfile
  eslint.config.js
  index.html
  nginx.conf
  package.json
  README.md
  repomix-output.xml
  vite.config.js
.gitignore
docker-compose.yml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backend/api/__init__.py">
"""API routers."""
</file>

<file path="backend/api/photos.py">
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict

from fastapi import APIRouter, Depends, File, Form, HTTPException, UploadFile
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session

from ..deps import get_db
from ..models import Photo
from ..schemas import PhotoOut, PhotoUpdate
from ..utils.exif import extract_exif
from ..utils.hashing import file_sha1
from ..utils.image_variants import VariantBuilder
from ..utils.storage import S3Storage

router          = APIRouter()
variant_builder = VariantBuilder()
storage         = S3Storage()


@router.get("/photos", response_model=list[PhotoOut])
def list_photos(db: Session = Depends(get_db)):
    return (
        db.query(Photo)
        .order_by(Photo.sort_order.asc(), Photo.id.desc())
        .all()
    )


@router.post("/photos", response_model=PhotoOut, status_code=201)
def upload_photo(
    file: UploadFile = File(...),
    title: str | None = Form(None),
    sort_order: int   = Form(0),
    db: Session       = Depends(get_db),
):
    tmp_dir  = Path(tempfile.mkdtemp(prefix="photo_upload_"))
    original = tmp_dir / file.filename
    with original.open("wb") as fh:
        for chunk in iter(lambda: file.file.read(8192), b""):
            fh.write(chunk)

    sha1  = file_sha1(original)
    size  = original.stat().st_size
    exif  = extract_exif(original)

    if title is not None:
        exif["title"] = title

    key_original = f"full/{original.name}"
    url_original = storage.upload_file(original, key_original)

    urls: Dict[str, str | None] = {"small": None, "thumbnail": None}
    for variant in variant_builder.VARIANT_SPECS:
        vfile = variant_builder.ensure_variant(original, variant)
        key   = f"{variant}/{vfile.name}"
        urls[variant] = storage.upload_file(vfile, key)

    photo = Photo(
        name           = original.name,
        sha1           = sha1,
        size           = size,
        original_url   = url_original,
        small_url      = urls["small"],
        thumbnail_url  = urls["thumbnail"],
        sort_order     = sort_order,
        created_at     = datetime.utcnow(),
        **{k: exif.get(k) for k in (
            "title", "camera", "lens", "iso",
            "aperture", "shutter_speed", "focal_length",
        )},
    )
    try:
        db.add(photo)
        db.flush()
    except IntegrityError:
        raise HTTPException(status_code=409, detail="A photo with this name already exists")

    return photo


@router.patch("/photos/{photo_id}", response_model=PhotoOut,
              responses={404: {"description": "Not found"}})
def edit_photo(photo_id: int, payload: PhotoUpdate, db: Session = Depends(get_db)):
    photo = db.get(Photo, photo_id)
    if not photo:
        raise HTTPException(status_code=404, detail="Photo not found")

    if payload.title is not None:
        photo.title = payload.title
    if payload.sort_order is not None:
        photo.sort_order = payload.sort_order

    db.add(photo)
    return photo


@router.delete("/photos/{photo_id}", status_code=204,
               responses={404: {"description": "Not found"}})
def delete_photo(photo_id: int, db: Session = Depends(get_db)):
    photo = db.get(Photo, photo_id)
    if not photo:
        raise HTTPException(status_code=404, detail="Photo not found")

    storage.delete_file(photo.original_url.split("/", 3)[-1])
    if photo.small_url:
        storage.delete_file(photo.small_url.split("/", 3)[-1])
    if photo.thumbnail_url:
        storage.delete_file(photo.thumbnail_url.split("/", 3)[-1])

    db.delete(photo)
    return {}
</file>

<file path="backend/utils/__init__.py">
"""Utility helpers (hashing, EXIF, variants, S3 storage)."""
</file>

<file path="backend/utils/exif.py">
from fractions import Fraction
from pathlib import Path
from typing import Any, Dict, Optional

from PIL import ExifTags, Image, ImageOps


def _rational_to_float(value) -> Optional[float]:
    if isinstance(value, (tuple, list)) and len(value) == 2 and value[1]:
        return value[0] / value[1]
    if isinstance(value, Fraction):
        return float(value)
    if isinstance(value, (int, float)):
        return float(value)
    return None


def extract_exif(path: Path) -> Dict[str, Any]:
    exif: Dict[str, Any] = {}
    try:
        with Image.open(path) as img:
            img = ImageOps.exif_transpose(img)
            raw  = img._getexif() or {}
    except Exception:
        return exif

    tag_map = {ExifTags.TAGS.get(k, k): v for k, v in raw.items()}

    if (model := tag_map.get("Model")):
        exif["camera"] = str(model).strip()

    if (lens := tag_map.get("LensModel")):
        exif["lens"] = str(lens).strip()

    if (iso_val := tag_map.get("ISOSpeedRatings") or tag_map.get("PhotographicSensitivity")):
        exif["iso"] = int(iso_val[0] if isinstance(iso_val, (list, tuple)) else iso_val)

    if (fnum := tag_map.get("FNumber")) is not None:
        if (f := _rational_to_float(fnum)):
            exif["aperture"] = f"f/{f:.1f}"

    if (shutter := tag_map.get("ExposureTime")) is not None:
        if isinstance(shutter, (tuple, list)) and len(shutter) == 2 and shutter[1]:
            exif["shutter_speed"] = f"{shutter[0]}/{shutter[1]} s"
        else:
            exif["shutter_speed"] = str(shutter)

    if (focal := tag_map.get("FocalLength")) is not None:
        if (fl := _rational_to_float(focal)):
            exif["focal_length"] = f"{fl:.0f} mm"

    title = tag_map.get("ImageDescription") or tag_map.get("XPTitle") or tag_map.get("Title")
    if isinstance(title, bytes):
            try:
                title = title.decode("utf‑16").rstrip("\x00")
            except Exception:
                title = None
    if title:
        exif["title"] = str(title).strip()

    return exif
</file>

<file path="backend/utils/hashing.py">
import hashlib
from pathlib import Path


def file_sha1(path: Path) -> str:
    h = hashlib.sha1()
    with path.open("rb") as fh:
        for chunk in iter(lambda: fh.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()
</file>

<file path="backend/utils/image_variants.py">
import tempfile
from pathlib import Path
from typing import Any

from PIL import Image, ImageOps


class VariantBuilder:
    TMP_ROOT       = Path(tempfile.gettempdir()) / "photo_variants"
    VARIANT_SPECS  = {"thumbnail": 400, "small": 1600}

    def ensure_variant(self, base: Path, variant: str) -> Path:
        target_px = self.VARIANT_SPECS[variant]
        out_path  = (self.TMP_ROOT / variant) / base.name
        out_path.parent.mkdir(parents=True, exist_ok=True)

        if out_path.exists() and out_path.stat().st_mtime >= base.stat().st_mtime:
            return out_path

        with Image.open(base) as img:
            img = ImageOps.exif_transpose(img)
            img.thumbnail((target_px, target_px), resample=Image.LANCZOS)
            save_kwargs: dict[str, Any] = {}
            if img.format == "JPEG":
                save_kwargs.update({"quality": 85, "optimize": True})
            img.save(out_path, **save_kwargs)
        return out_path
</file>

<file path="backend/utils/storage.py">
import mimetypes
from pathlib import Path

from ..config import AWS_REGION, S3_BUCKET, logger, s3_client


class S3Storage:
    def __init__(self, bucket: str = S3_BUCKET, region: str = AWS_REGION):
        self.bucket = bucket
        self.region = region
        self.client = s3_client

    def public_url(self, key: str) -> str:
        return f"https://{self.bucket}.s3.{self.region}.amazonaws.com/{key}"

    def upload_file(self, path: Path, key: str) -> str:
        mimetype, _ = mimetypes.guess_type(path.name)
        logger.info("Uploading %s → %s", path.name, key)
        self.client.upload_file(
            str(path),
            self.bucket,
            key,
            ExtraArgs={"ACL": "public-read", "ContentType": mimetype or "application/octet-stream"},
        )
        return self.public_url(key)

    def delete_file(self, key: str) -> None:
        logger.info("Deleting key=%s from S3", key)
        self.client.delete_object(Bucket=self.bucket, Key=key)
</file>

<file path="backend/__init__.py">
"""Package marker for the Photo Service."""
</file>

<file path="backend/config.py">
import logging
import os

import boto3
from dotenv import load_dotenv

load_dotenv()

AWS_REGION = os.getenv("AWS_DEFAULT_REGION", "us‑east‑1")
S3_BUCKET  = os.getenv("S3_BUCKET")
AWS_KEY    = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET = os.getenv("AWS_SECRET_ACCESS_KEY")
DB_URL     = os.getenv("DATABASE_URL", "sqlite:///photos.db")
LOG_LEVEL  = os.getenv("LOG_LEVEL", "INFO").upper()

if not all([S3_BUCKET, AWS_KEY, AWS_SECRET]):
    raise RuntimeError(
        "S3_BUCKET, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY must be set"
    )

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y‑%m‑%d %H:%M:%S",
)
logger = logging.getLogger("photo_service")

s3_client = boto3.client(
    "s3",
    region_name=AWS_REGION,
    aws_access_key_id=AWS_KEY,
    aws_secret_access_key=AWS_SECRET,
)
</file>

<file path="backend/database.py">
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

from .config import DB_URL

connect_opts = {"check_same_thread": False} if DB_URL.startswith("sqlite") else {}
engine       = create_engine(DB_URL, connect_args=connect_opts)

SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)
Base         = declarative_base()
</file>

<file path="backend/deps.py">
from typing import Iterator

from sqlalchemy.orm import Session

from .database import SessionLocal


def get_db() -> Iterator[Session]:
    db: Session = SessionLocal()
    try:
        yield db
        db.commit()
    except Exception:
        db.rollback()
        raise
    finally:
        db.close()
</file>

<file path="backend/main.py">
from fastapi import FastAPI

from .api.photos import router as photos_router

app = FastAPI(title="Photo API")
app.include_router(photos_router)
</file>

<file path="backend/models.py">
from datetime import datetime

from sqlalchemy import Column, DateTime, Integer, String

from .database import Base, engine


class Photo(Base):
    __tablename__ = "photos"

    id             = Column(Integer, primary_key=True)
    name           = Column(String, unique=True, nullable=False)
    sha1           = Column(String(40), nullable=False)
    size           = Column(Integer, nullable=False)
    original_url   = Column(String, nullable=False)
    small_url      = Column(String)
    thumbnail_url  = Column(String)
    sort_order     = Column(Integer, default=0, nullable=False)
    title          = Column(String)
    camera         = Column(String)
    lens           = Column(String)
    iso            = Column(Integer)
    aperture       = Column(String)
    shutter_speed  = Column(String)
    focal_length   = Column(String)
    created_at     = Column(DateTime, default=datetime.utcnow, nullable=False)


# Bootstrap tables (safe—no‑op if already present)
Base.metadata.create_all(bind=engine)
</file>

<file path="backend/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
api/
  __init__.py
  photos.py
utils/
  __init__.py
  exif.py
  hashing.py
  image_variants.py
  storage.py
__init__.py
config.py
database.py
deps.py
main.py
models.py
schemas.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="api/__init__.py">
"""API routers."""
</file>

<file path="api/photos.py">
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict

from fastapi import APIRouter, Depends, File, Form, HTTPException, UploadFile
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session

from ..deps import get_db
from ..models import Photo
from ..schemas import PhotoOut, PhotoUpdate
from ..utils.exif import extract_exif
from ..utils.hashing import file_sha1
from ..utils.image_variants import VariantBuilder
from ..utils.storage import S3Storage

router          = APIRouter()
variant_builder = VariantBuilder()
storage         = S3Storage()


@router.get("/photos", response_model=list[PhotoOut])
def list_photos(db: Session = Depends(get_db)):
    return (
        db.query(Photo)
        .order_by(Photo.sort_order.asc(), Photo.id.desc())
        .all()
    )


@router.post("/photos", response_model=PhotoOut, status_code=201)
def upload_photo(
    file: UploadFile = File(...),
    title: str | None = Form(None),
    sort_order: int   = Form(0),
    db: Session       = Depends(get_db),
):
    tmp_dir  = Path(tempfile.mkdtemp(prefix="photo_upload_"))
    original = tmp_dir / file.filename
    with original.open("wb") as fh:
        for chunk in iter(lambda: file.file.read(8192), b""):
            fh.write(chunk)

    sha1  = file_sha1(original)
    size  = original.stat().st_size
    exif  = extract_exif(original)

    if title is not None:
        exif["title"] = title

    key_original = f"full/{original.name}"
    url_original = storage.upload_file(original, key_original)

    urls: Dict[str, str | None] = {"small": None, "thumbnail": None}
    for variant in variant_builder.VARIANT_SPECS:
        vfile = variant_builder.ensure_variant(original, variant)
        key   = f"{variant}/{vfile.name}"
        urls[variant] = storage.upload_file(vfile, key)

    photo = Photo(
        name           = original.name,
        sha1           = sha1,
        size           = size,
        original_url   = url_original,
        small_url      = urls["small"],
        thumbnail_url  = urls["thumbnail"],
        sort_order     = sort_order,
        created_at     = datetime.utcnow(),
        **{k: exif.get(k) for k in (
            "title", "camera", "lens", "iso",
            "aperture", "shutter_speed", "focal_length",
        )},
    )
    try:
        db.add(photo)
        db.flush()
    except IntegrityError:
        raise HTTPException(status_code=409, detail="A photo with this name already exists")

    return photo


@router.patch("/photos/{photo_id}", response_model=PhotoOut,
              responses={404: {"description": "Not found"}})
def edit_photo(photo_id: int, payload: PhotoUpdate, db: Session = Depends(get_db)):
    photo = db.get(Photo, photo_id)
    if not photo:
        raise HTTPException(status_code=404, detail="Photo not found")

    if payload.title is not None:
        photo.title = payload.title
    if payload.sort_order is not None:
        photo.sort_order = payload.sort_order

    db.add(photo)
    return photo


@router.delete("/photos/{photo_id}", status_code=204,
               responses={404: {"description": "Not found"}})
def delete_photo(photo_id: int, db: Session = Depends(get_db)):
    photo = db.get(Photo, photo_id)
    if not photo:
        raise HTTPException(status_code=404, detail="Photo not found")

    storage.delete_file(photo.original_url.split("/", 3)[-1])
    if photo.small_url:
        storage.delete_file(photo.small_url.split("/", 3)[-1])
    if photo.thumbnail_url:
        storage.delete_file(photo.thumbnail_url.split("/", 3)[-1])

    db.delete(photo)
    return {}
</file>

<file path="utils/__init__.py">
"""Utility helpers (hashing, EXIF, variants, S3 storage)."""
</file>

<file path="utils/exif.py">
from fractions import Fraction
from pathlib import Path
from typing import Any, Dict, Optional

from PIL import ExifTags, Image, ImageOps


def _rational_to_float(value) -> Optional[float]:
    if isinstance(value, (tuple, list)) and len(value) == 2 and value[1]:
        return value[0] / value[1]
    if isinstance(value, Fraction):
        return float(value)
    if isinstance(value, (int, float)):
        return float(value)
    return None


def extract_exif(path: Path) -> Dict[str, Any]:
    exif: Dict[str, Any] = {}
    try:
        with Image.open(path) as img:
            img = ImageOps.exif_transpose(img)
            raw  = img._getexif() or {}
    except Exception:
        return exif

    tag_map = {ExifTags.TAGS.get(k, k): v for k, v in raw.items()}

    if (model := tag_map.get("Model")):
        exif["camera"] = str(model).strip()

    if (lens := tag_map.get("LensModel")):
        exif["lens"] = str(lens).strip()

    if (iso_val := tag_map.get("ISOSpeedRatings") or tag_map.get("PhotographicSensitivity")):
        exif["iso"] = int(iso_val[0] if isinstance(iso_val, (list, tuple)) else iso_val)

    if (fnum := tag_map.get("FNumber")) is not None:
        if (f := _rational_to_float(fnum)):
            exif["aperture"] = f"f/{f:.1f}"

    if (shutter := tag_map.get("ExposureTime")) is not None:
        if isinstance(shutter, (tuple, list)) and len(shutter) == 2 and shutter[1]:
            exif["shutter_speed"] = f"{shutter[0]}/{shutter[1]} s"
        else:
            exif["shutter_speed"] = str(shutter)

    if (focal := tag_map.get("FocalLength")) is not None:
        if (fl := _rational_to_float(focal)):
            exif["focal_length"] = f"{fl:.0f} mm"

    title = tag_map.get("ImageDescription") or tag_map.get("XPTitle") or tag_map.get("Title")
    if isinstance(title, bytes):
            try:
                title = title.decode("utf‑16").rstrip("\x00")
            except Exception:
                title = None
    if title:
        exif["title"] = str(title).strip()

    return exif
</file>

<file path="utils/hashing.py">
import hashlib
from pathlib import Path


def file_sha1(path: Path) -> str:
    h = hashlib.sha1()
    with path.open("rb") as fh:
        for chunk in iter(lambda: fh.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()
</file>

<file path="utils/image_variants.py">
import tempfile
from pathlib import Path
from typing import Any

from PIL import Image, ImageOps


class VariantBuilder:
    TMP_ROOT       = Path(tempfile.gettempdir()) / "photo_variants"
    VARIANT_SPECS  = {"thumbnail": 400, "small": 1600}

    def ensure_variant(self, base: Path, variant: str) -> Path:
        target_px = self.VARIANT_SPECS[variant]
        out_path  = (self.TMP_ROOT / variant) / base.name
        out_path.parent.mkdir(parents=True, exist_ok=True)

        if out_path.exists() and out_path.stat().st_mtime >= base.stat().st_mtime:
            return out_path

        with Image.open(base) as img:
            img = ImageOps.exif_transpose(img)
            img.thumbnail((target_px, target_px), resample=Image.LANCZOS)
            save_kwargs: dict[str, Any] = {}
            if img.format == "JPEG":
                save_kwargs.update({"quality": 85, "optimize": True})
            img.save(out_path, **save_kwargs)
        return out_path
</file>

<file path="utils/storage.py">
import mimetypes
from pathlib import Path

from ..config import AWS_REGION, S3_BUCKET, logger, s3_client


class S3Storage:
    def __init__(self, bucket: str = S3_BUCKET, region: str = AWS_REGION):
        self.bucket = bucket
        self.region = region
        self.client = s3_client

    def public_url(self, key: str) -> str:
        return f"https://{self.bucket}.s3.{self.region}.amazonaws.com/{key}"

    def upload_file(self, path: Path, key: str) -> str:
        mimetype, _ = mimetypes.guess_type(path.name)
        logger.info("Uploading %s → %s", path.name, key)
        self.client.upload_file(
            str(path),
            self.bucket,
            key,
            ExtraArgs={"ACL": "public-read", "ContentType": mimetype or "application/octet-stream"},
        )
        return self.public_url(key)

    def delete_file(self, key: str) -> None:
        logger.info("Deleting key=%s from S3", key)
        self.client.delete_object(Bucket=self.bucket, Key=key)
</file>

<file path="__init__.py">
"""Package marker for the Photo Service."""
</file>

<file path="config.py">
import logging
import os

import boto3
from dotenv import load_dotenv

load_dotenv()

AWS_REGION = os.getenv("AWS_DEFAULT_REGION", "us‑east‑1")
S3_BUCKET  = os.getenv("S3_BUCKET")
AWS_KEY    = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET = os.getenv("AWS_SECRET_ACCESS_KEY")
DB_URL     = os.getenv("DATABASE_URL", "sqlite:///photos.db")
LOG_LEVEL  = os.getenv("LOG_LEVEL", "INFO").upper()

if not all([S3_BUCKET, AWS_KEY, AWS_SECRET]):
    raise RuntimeError(
        "S3_BUCKET, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY must be set"
    )

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y‑%m‑%d %H:%M:%S",
)
logger = logging.getLogger("photo_service")

s3_client = boto3.client(
    "s3",
    region_name=AWS_REGION,
    aws_access_key_id=AWS_KEY,
    aws_secret_access_key=AWS_SECRET,
)
</file>

<file path="database.py">
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

from .config import DB_URL

connect_opts = {"check_same_thread": False} if DB_URL.startswith("sqlite") else {}
engine       = create_engine(DB_URL, connect_args=connect_opts)

SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)
Base         = declarative_base()
</file>

<file path="deps.py">
from typing import Iterator

from sqlalchemy.orm import Session

from .database import SessionLocal


def get_db() -> Iterator[Session]:
    db: Session = SessionLocal()
    try:
        yield db
        db.commit()
    except Exception:
        db.rollback()
        raise
    finally:
        db.close()
</file>

<file path="main.py">
from fastapi import FastAPI

from .api.photos import router as photos_router

app = FastAPI(title="Photo API")
app.include_router(photos_router)
</file>

<file path="models.py">
from datetime import datetime

from sqlalchemy import Column, DateTime, Integer, String

from .database import Base, engine


class Photo(Base):
    __tablename__ = "photos"

    id             = Column(Integer, primary_key=True)
    name           = Column(String, unique=True, nullable=False)
    sha1           = Column(String(40), nullable=False)
    size           = Column(Integer, nullable=False)
    original_url   = Column(String, nullable=False)
    small_url      = Column(String)
    thumbnail_url  = Column(String)
    sort_order     = Column(Integer, default=0, nullable=False)
    title          = Column(String)
    camera         = Column(String)
    lens           = Column(String)
    iso            = Column(Integer)
    aperture       = Column(String)
    shutter_speed  = Column(String)
    focal_length   = Column(String)
    created_at     = Column(DateTime, default=datetime.utcnow, nullable=False)


# Bootstrap tables (safe—no‑op if already present)
Base.metadata.create_all(bind=engine)
</file>

<file path="schemas.py">
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class PhotoOut(BaseModel):
    id:            int
    name:          str
    original_url:  str
    small_url:     Optional[str] = None
    thumbnail_url: Optional[str] = None
    sort_order:    int
    title:         Optional[str] = None
    camera:        Optional[str] = None
    lens:          Optional[str] = None
    iso:           Optional[int] = None
    aperture:      Optional[str] = None
    shutter_speed: Optional[str] = None
    focal_length:  Optional[str] = None
    created_at:    datetime

    class Config:
        orm_mode = True


class PhotoUpdate(BaseModel):
    title:      Optional[str] = None
    sort_order: Optional[int] = None
</file>

</files>
</file>

<file path="backend/schemas.py">
from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class PhotoOut(BaseModel):
    id:            int
    name:          str
    original_url:  str
    small_url:     Optional[str] = None
    thumbnail_url: Optional[str] = None
    sort_order:    int
    title:         Optional[str] = None
    camera:        Optional[str] = None
    lens:          Optional[str] = None
    iso:           Optional[int] = None
    aperture:      Optional[str] = None
    shutter_speed: Optional[str] = None
    focal_length:  Optional[str] = None
    created_at:    datetime

    class Config:
        orm_mode = True


class PhotoUpdate(BaseModel):
    title:      Optional[str] = None
    sort_order: Optional[int] = None
</file>

<file path="backend/Dockerfile">
# start from the official Python slim image
FROM python:3.10-slim

# set a working directory
WORKDIR /app

# install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# copy the rest of the backend code
COPY . .

# default command: run Uvicorn on your FastAPI app
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
</file>

<file path="site/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="site/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="site/src/components/Gallery.jsx">
import React from "react";
import Photo from "./Photo";

export default function Gallery({ items }) {
  return (
    <div id="gallery" className="gallery">
      {items.map(p => <Photo key={p.sha1 || p.url} photo={p} />)}
    </div>
  );
}
</file>

<file path="site/src/index.css">
body { font-family: system-ui, sans-serif; margin: 0; }
h1   { margin: 1.5rem 0; text-align: center; }

.gallery      { display: flex; flex-direction: column; gap: 2rem; width: 100%; }
.photo a      { display: block; }
.photo img    { display: block; width: 100%; height: auto; max-height: 100vh; object-fit: contain; }

.caption      { margin-top: 0.5rem; line-height: 1.3; text-align: center; }
.caption .title { font-size: .95rem; font-weight: 600; color: #333; }
.caption .meta  { font-size: .8rem;  color: #666; }
</file>

<file path="site/src/Management.jsx">
import React, { useEffect, useState, useCallback } from "react";

export default function Management() {
  const [photos, setPhotos] = useState([]);
  const [title, setTitle]   = useState("");
  const [dragActive, setDragActive] = useState(false);
  const [dragIdx,    setDragIdx]    = useState(null);

  /* ----------------------------- helpers -------------------------------- */
  const refresh = useCallback(() => {
    fetch("/photos")
      .then(r => r.json())
      .then(setPhotos)
      .catch(console.error);
  }, []);

  const deletePhoto = id => {
    if (!confirm("Delete this photo?")) return;
    fetch(`/photos/${id}`, { method: "DELETE" })
      .then(() => setPhotos(p => p.filter(ph => ph.id !== id)))
      .catch(console.error);
  };

  const uploadFiles = files => {
    Array.from(files).forEach(file => {
      const fd = new FormData();
      fd.append("file", file);
      if (title) fd.append("title", title);
      fetch("/photos", { method: "POST", body: fd })
        .then(refresh)
        .catch(console.error);
    });
  };

  const persistOrder = order => {
    order.forEach((p, idx) => {
      if (p.sort_order !== idx) {
        fetch(`/photos/${p.id}`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ sort_order: idx })
        }).catch(console.error);
        p.sort_order = idx;   // optimistic update
      }
    });
  };

  /* ------------------------- bulk drag‑and‑drop ------------------------- */
  const handleDrag = e => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") setDragActive(true);
    else if (e.type === "dragleave") setDragActive(false);
  };

  const handleDrop = e => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files?.length) uploadFiles(e.dataTransfer.files);
  };

  const handleInputChange = e => {
    if (e.target.files?.length) uploadFiles(e.target.files);
    e.target.value = "";
  };

  /* -------------------- per‑photo drag‑to‑reorder ----------------------- */
  const handleDragStartItem = idx => () => setDragIdx(idx);

  const handleDragOverItem = idx => e => {
    e.preventDefault();
    if (dragIdx === null || dragIdx === idx) return;
    setPhotos(prev => {
      const arr = [...prev];
      const [moved] = arr.splice(dragIdx, 1);
      arr.splice(idx, 0, moved);
      return arr;
    });
    setDragIdx(idx);
  };

  const handleDragEndItem = () => {
    setDragIdx(null);
    setPhotos(curr => {
      persistOrder(curr);
      return curr;
    });
  };

  /* ------------------------------ initial load -------------------------- */
  useEffect(refresh, [refresh]);

  /* ------------------------------ render -------------------------------- */
  return (
    <main style={{ maxWidth: 900, margin: "0 auto", padding: "2rem 1rem" }}>
      <h1>Photo Management</h1>

      {/* ---------- upload zone ------------------------------------------ */}
      <section
        onDragEnter={handleDrag}
        onDragOver={handleDrag}
        onDragLeave={handleDrag}
        onDrop={handleDrop}
        style={{
          border: "2px dashed #aaa",
          borderRadius: 8,
          padding: "2rem",
          textAlign: "center",
          background: dragActive ? "#f6f8fa" : "transparent",
          marginBottom: "2rem",
          cursor: "pointer"
        }}
        onClick={() => document.getElementById("file-picker").click()}
      >
        <p style={{ margin: 0, fontSize: "1.1rem" }}>
          Drag &amp; drop images here — or click to choose multiple
        </p>
        <input
          id="file-picker"
          type="file"
          accept="image/*"
          multiple
          onChange={handleInputChange}
          style={{ display: "none" }}
        />
        <div style={{ marginTop: "1rem", display: "flex", gap: "0.5rem", flexWrap: "wrap", justifyContent: "center" }}>
          <input
            type="text"
            placeholder="Optional title (applied to each)"
            value={title}
            onChange={e => setTitle(e.target.value)}
          />
        </div>
      </section>

      {/* ---------- list -------------------------------------------------- */}
      <h2>Existing Photos ({photos.length})</h2>
      <p style={{ fontSize: ".85rem", marginTop: 0 }}>Tip: drag thumbnails to reorder</p>
      <div style={{
        display: "grid",
        gridTemplateColumns: "repeat(auto-fill, minmax(160px, 1fr))",
        gap: "1rem"
      }}>
        {photos.map((p, i) => (
          <div
            key={p.id}
            draggable
            onDragStart={handleDragStartItem(i)}
            onDragOver={handleDragOverItem(i)}
            onDragEnd={handleDragEndItem}
            style={{
              border: "1px solid #ddd",
              padding: "0.5rem",
              background: dragIdx === i ? "#f0f6ff" : "white",
              cursor: "grab"
            }}
          >
            <img
              src={p.thumbnail_url || p.small_url || p.original_url}
              alt={p.title || p.name}
              style={{ width: "100%", aspectRatio: "1/1", objectFit: "cover" }}
            />
            <div style={{ marginTop: "0.5rem", fontSize: ".85rem", lineHeight: 1.3 }}>
              <strong>{p.title || p.name || "—"}</strong>
            </div>
            <button
              onClick={() => deletePhoto(p.id)}
              style={{ marginTop: "0.5rem", width: "100%" }}
            >
              Delete
            </button>
          </div>
        ))}
      </div>
    </main>
  );
}
</file>

<file path="site/src/utils.js">
// Format shutter speeds supplied as numbers *or* fractions, e.g. "1/250"

/**
 * Compute a SHA‑1 hex digest in **both** browsers and Node.
 * @param {string|Uint8Array} input
 * @returns {Promise<string>} 40‑char hex string
 */
export async function sha1Hex(input) {
  const data = typeof input === 'string' ? new TextEncoder().encode(input) : input;

  if (globalThis.crypto?.subtle?.digest) {
    const buf = await crypto.subtle.digest('SHA-1', data);
    return [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join('');
  }

  // Node path — built‑in ‘crypto’ module
  const { createHash } = await import('crypto');
  return createHash('sha1').update(data).digest('hex');
}

export function formatShutter(s) {
  if (s == null) return "";

  let v;

  if (typeof s === "number") {
    v = s;
  } else {
    const str = String(s).trim();
    if (str.includes("/")) {
      const [num, den] = str.split("/").map(Number);
      if (num && den) v = num / den;
    } else {
      v = parseFloat(str);
    }
  }

  if (!v) return "";
  return v >= 1 ? `${v}s` : `1/${Math.round(1 / v)}s`;
}

// Extract aperture from "f/2.8", "F2.8", etc.
export function extractAperture(lens = "") {
  const m = lens.match(/f\/?(\d+(\.\d+)?)/i);
  return m ? m[1] : "";
}
</file>

<file path="site/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="site/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="site/package.json">
{
  "name": "site",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.0.4"
  }
}
</file>

<file path="site/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="site/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="backend/requirements.txt">
fastapi
uvicorn[standard]
boto3
python-dotenv
SQLAlchemy
databases[sqlite]
</file>

<file path="site/src/components/Photo.jsx">
import React from "react";
import { formatShutter, extractAperture } from "../utils";

export default function Photo({ photo }) {
  const {
    title, name, camera, lens, shutter_speed,
    iso, url, small_url, thumbnail_url,
  } = photo;

  const src      = small_url || thumbnail_url || url;
  const shutter  = formatShutter(shutter_speed);
  const aperture = extractAperture(lens);
  const exposure = [shutter, aperture && `f/${aperture}`, iso && `ISO ${iso}`]
                     .filter(Boolean).join(" | ");

  return (
    <div className="photo">
      <a href={url} target="_blank" rel="noopener noreferrer">
        <img
          src={src}
          alt={title || name || "Photo"}
          loading="lazy"
          decoding="async"
        />
      </a>
      <div className="caption">
        <span className="title">{title || name}</span><br />
        <span className="meta">
          {camera}<br />
          {lens}<br />
          {exposure}
        </span>
      </div>
    </div>
  );
}
</file>

<file path="site/src/App.jsx">
import React, { useEffect, useRef, useState, useCallback } from "react";
import Gallery from "./components/Gallery";
import "./index.css";

const BATCH = 10;

export default function App() {
  const [all,  setAll]  = useState([]);
  const [show, setShow] = useState([]);
  const next   = useRef(0);
  const sent   = useRef(null);

  // Fetch photos in the order provided by the API (sort_order → newest)
  useEffect(() => {
    fetch("/photos.json")
      .then(r => r.json())
      .then(d => setAll(Array.isArray(d) ? d : Object.values(d)))
      .catch(console.error);
  }, []);

  const load = useCallback(() => {
    if (next.current >= all.length) return;
    setShow(v => {
      const slice = all.slice(next.current, next.current + BATCH);
      next.current += slice.length;
      return [...v, ...slice];
    });
  }, [all]);

  useEffect(() => {
    if (!all.length) return;
    load();

    const ob = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          load();
          if (next.current >= all.length && sent.current) ob.disconnect();
        }
      },
      { rootMargin: "200px" }
    );

    if (sent.current) ob.observe(sent.current);
    return () => ob.disconnect();
  }, [all, load]);

  return (
    <>
      <h1>Photo Gallery</h1>
      <Gallery items={show} />
      <div id="sentinel" ref={sent} style={{ height: 1 }} />
    </>
  );
}
</file>

<file path="site/src/main.jsx">
import React from "react";
import ReactDOM from "react-dom/client";
import App        from "./App";
import Management from "./Management";

const Root = window.location.pathname.startsWith("/manage") ? Management : App;

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode><Root /></React.StrictMode>
);
</file>

<file path="site/Dockerfile">
# site/Dockerfile
# ---------- build stage ----------
FROM node:20-alpine AS build

WORKDIR /app

# copy just package.json so Docker can cache 'npm install'
COPY package.json ./

# install deps (will read package-lock.json if you add it later)
RUN npm install --foreground-scripts

# now bring in the rest of your source
COPY . .

# build into /app/dist
RUN npm run build

# ---------- production stage ----------
FROM nginx:1.27-alpine

COPY --from=build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="site/nginx.conf">
server {
    listen 80;
    server_name _;
    client_max_body_size 30M;
    root /usr/share/nginx/html;
    index index.html;

    # SPA routing
    location / {
        try_files $uri /index.html;
    }

    # API passthrough → FastAPI service
    location /photos {
        proxy_pass http://backend:8000$request_uri;
    }
    location /photos.json {
        proxy_pass http://backend:8000/photos;
    }
}
</file>

<file path="site/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    Gallery.jsx
    Photo.jsx
  App.jsx
  index.css
  main.jsx
  Management.jsx
  utils.js
.gitignore
Dockerfile
eslint.config.js
index.html
nginx.conf
package.json
README.md
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/Gallery.jsx">
import React from "react";
import Photo from "./Photo";

export default function Gallery({ items }) {
  return (
    <div id="gallery" className="gallery">
      {items.map(p => <Photo key={p.sha1 || p.url} photo={p} />)}
    </div>
  );
}
</file>

<file path="src/components/Photo.jsx">
import React from "react";
import { formatShutter, extractAperture } from "../utils";

export default function Photo({ photo }) {
  const {
    title, name, camera, lens, shutter_speed,
    iso, rating, url, small_url, thumbnail_url,
  } = photo;

  const src      = small_url || thumbnail_url || url;
  const shutter  = formatShutter(shutter_speed);
  const aperture = extractAperture(lens);
  const exposure = [shutter, aperture && `f/${aperture}`, iso && `ISO ${iso}`]
                     .filter(Boolean).join(" | ");

  return (
    <div className="photo">
      <a href={url} target="_blank" rel="noopener noreferrer">
        <img
          src={src}
          alt={title || name || "Photo"}
          loading="lazy"
          decoding="async"
        />
      </a>
      <div className="caption">
        <span className="title">{title || name}</span><br />
        <span className="meta">
          {camera}<br />
          {lens}<br />
          {exposure}{rating != null && ` | ★ ${rating}`}
        </span>
      </div>
    </div>
  );
}
</file>

<file path="src/App.jsx">
import React, { useEffect, useRef, useState, useCallback } from "react";
import Gallery from "./components/Gallery";
import "./index.css";

const BATCH = 10;

export default function App() {
  const [all,  setAll]  = useState([]);
  const [show, setShow] = useState([]);
  const next   = useRef(0);
  const sent   = useRef(null);

  // Fetch & sort photos
  useEffect(() => {
    fetch("/photos.json")
      .then(r => r.json())
      .then(d => {
        const arr = Array.isArray(d) ? d : Object.values(d);
        arr.sort((a, b) => (b.rating ?? 0) - (a.rating ?? 0));
        setAll(arr);
      })
      .catch(console.error);
  }, []);

  // Load helper
  const load = useCallback(() => {
    if (next.current >= all.length) return;         // nothing left
    setShow(v => {
      const slice = all.slice(next.current, next.current + BATCH);
      next.current += slice.length;
      return [...v, ...slice];
    });
  }, [all]);

  // Infinite scroll
  useEffect(() => {
    if (!all.length) return;
    load();                                         // first batch

    const ob = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          load();
          if (next.current >= all.length && sent.current) {
            ob.disconnect();                       // stop once done
          }
        }
      },
      { rootMargin: "200px" }
    );

    if (sent.current) ob.observe(sent.current);
    return () => ob.disconnect();
  }, [all, load]);

  return (
    <>
      <h1>Photo Gallery</h1>
      <Gallery items={show} />
      <div id="sentinel" ref={sent} style={{ height: 1 }} />
    </>
  );
}
</file>

<file path="src/index.css">
body { font-family: system-ui, sans-serif; margin: 0; }
h1   { margin: 1.5rem 0; text-align: center; }

.gallery      { display: flex; flex-direction: column; gap: 2rem; width: 100%; }
.photo a      { display: block; }
.photo img    { display: block; width: 100%; height: auto; max-height: 100vh; object-fit: contain; }

.caption      { margin-top: 0.5rem; line-height: 1.3; text-align: center; }
.caption .title { font-size: .95rem; font-weight: 600; color: #333; }
.caption .meta  { font-size: .8rem;  color: #666; }
</file>

<file path="src/main.jsx">
import React from "react";
import ReactDOM from "react-dom/client";
import App        from "./App";
import Management from "./Management";

const Root = window.location.pathname.startsWith("/manage") ? Management : App;

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode><Root /></React.StrictMode>
);
</file>

<file path="src/Management.jsx">
import React, { useEffect, useState, useCallback } from "react";

export default function Management() {
  const [photos, setPhotos] = useState([]);
  const [title, setTitle] = useState("");
  const [rating, setRating] = useState("");
  const [dragActive, setDragActive] = useState(false);

  /* -------------------------------- helpers ------------------------------ */
  const refresh = useCallback(() => {
    fetch("/photos")
      .then(r => r.json())
      .then(setPhotos)
      .catch(console.error);
  }, []);

  const deletePhoto = id => {
    if (!confirm("Delete this photo?")) return;
    fetch(`/photos/${id}`, { method: "DELETE" })
      .then(() => setPhotos(p => p.filter(ph => ph.id !== id)))
      .catch(console.error);
  };

  const uploadFiles = files => {
    Array.from(files).forEach(file => {
      const fd = new FormData();
      fd.append("file", file);
      if (title)  fd.append("title",  title);
      if (rating) fd.append("rating", rating);
      fetch("/photos", { method: "POST", body: fd })
        .then(refresh)
        .catch(console.error);
    });
  };

  /* ------------------------------ drag ‘n’ drop -------------------------- */
  const handleDrag = e => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") setDragActive(true);
    else if (e.type === "dragleave") setDragActive(false);
  };

  const handleDrop = e => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files?.length) uploadFiles(e.dataTransfer.files);
  };

  const handleInputChange = e => {
    if (e.target.files?.length) uploadFiles(e.target.files);
    e.target.value = "";                       // reset so same files can be re‑selected
  };

  /* -------------------------------- first load --------------------------- */
  useEffect(refresh, [refresh]);

  /* -------------------------------- render ------------------------------- */
  return (
    <main style={{ maxWidth: 900, margin: "0 auto", padding: "2rem 1rem" }}>
      <h1>Photo Management</h1>

      {/* ----- bulk‑upload zone ------------------------------------------- */}
      <section
        onDragEnter={handleDrag}
        onDragOver={handleDrag}
        onDragLeave={handleDrag}
        onDrop={handleDrop}
        style={{
          border: "2px dashed #aaa",
          borderRadius: 8,
          padding: "2rem",
          textAlign: "center",
          background: dragActive ? "#f6f8fa" : "transparent",
          marginBottom: "2rem",
          cursor: "pointer"
        }}
        onClick={() => document.getElementById("file-picker").click()}
      >
        <p style={{ margin: 0, fontSize: "1.1rem" }}>
          Drag &amp; drop images here&nbsp;— or click to choose multiple
        </p>
        <input
          id="file-picker"
          type="file"
          accept="image/*"
          multiple
          onChange={handleInputChange}
          style={{ display: "none" }}
        />
        <div style={{ marginTop: "1rem", display: "flex", gap: "0.5rem", flexWrap: "wrap", justifyContent: "center" }}>
          <input
            type="text"
            placeholder="Optional title (applied to each)"
            value={title}
            onChange={e => setTitle(e.target.value)}
          />
          <input
            type="number"
            placeholder="Rating"
            value={rating}
            onChange={e => setRating(e.target.value)}
            style={{ width: 100 }}
          />
        </div>
      </section>

      {/* ----- list -------------------------------------------------------- */}
      <h2>Existing Photos ({photos.length})</h2>
      <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(160px, 1fr))", gap: "1rem" }}>
        {photos.map(p => (
          <div key={p.id} style={{ border: "1px solid #ddd", padding: "0.5rem" }}>
            <img
              src={p.thumbnail_url || p.small_url || p.original_url}
              alt={p.title || p.name}
              style={{ width: "100%", aspectRatio: "1/1", objectFit: "cover" }}
            />
            <div style={{ marginTop: "0.5rem", fontSize: ".85rem", lineHeight: 1.3 }}>
              <strong>{p.title || p.name || "—"}</strong><br />
              ★ {p.rating ?? "—"}
            </div>
            <button onClick={() => deletePhoto(p.id)} style={{ marginTop: "0.5rem", width: "100%" }}>
              Delete
            </button>
          </div>
        ))}
      </div>
    </main>
  );
}
</file>

<file path="src/utils.js">
// Format shutter speeds supplied as numbers *or* fractions, e.g. "1/250"

/**
 * Compute a SHA‑1 hex digest in **both** browsers and Node.
 * @param {string|Uint8Array} input
 * @returns {Promise<string>} 40‑char hex string
 */
export async function sha1Hex(input) {
  const data = typeof input === 'string' ? new TextEncoder().encode(input) : input;

  if (globalThis.crypto?.subtle?.digest) {
    const buf = await crypto.subtle.digest('SHA-1', data);
    return [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join('');
  }

  // Node path — built‑in ‘crypto’ module
  const { createHash } = await import('crypto');
  return createHash('sha1').update(data).digest('hex');
}

export function formatShutter(s) {
  if (s == null) return "";

  let v;

  if (typeof s === "number") {
    v = s;
  } else {
    const str = String(s).trim();
    if (str.includes("/")) {
      const [num, den] = str.split("/").map(Number);
      if (num && den) v = num / den;
    } else {
      v = parseFloat(str);
    }
  }

  if (!v) return "";
  return v >= 1 ? `${v}s` : `1/${Math.round(1 / v)}s`;
}

// Extract aperture from "f/2.8", "F2.8", etc.
export function extractAperture(lens = "") {
  const m = lens.match(/f\/?(\d+(\.\d+)?)/i);
  return m ? m[1] : "";
}
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="Dockerfile">
# site/Dockerfile
# ---------- build stage ----------
FROM node:20-alpine AS build

WORKDIR /app

# copy just package.json so Docker can cache 'npm install'
COPY package.json ./

# install deps (will read package-lock.json if you add it later)
RUN npm install --foreground-scripts

# now bring in the rest of your source
COPY . .

# build into /app/dist
RUN npm run build

# ---------- production stage ----------
FROM nginx:1.27-alpine

COPY --from=build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Photo Gallery</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body>
    <noscript>You need JavaScript enabled to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="nginx.conf">
server {
    listen 80;
    server_name _;
    client_max_body_size 30M;
    root /usr/share/nginx/html;
    index index.html;

    # SPA routing
    location / {
        try_files $uri /index.html;
    }

    # API passthrough → FastAPI service
    location /photos {
        proxy_pass http://backend:8000$request_uri;
    }
    location /photos.json {
        proxy_pass http://backend:8000/photos;
    }
}
</file>

<file path="package.json">
{
  "name": "site",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.0.4"
  }
}
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

</files>
</file>

<file path=".gitignore">
# This .gitignore is appropriate for repositories deployed to GitHub Pages and using
# a Gemfile as specified at https://github.com/github/pages-gem#conventional

# Basic Jekyll gitignores (synchronize to Jekyll.gitignore)
_site/
.sass-cache/
.jekyll-cache/
.jekyll-metadata

# Additional Ruby/bundler ignore for when you run: bundle install
/vendor

# Specific ignore for GitHub Pages
# GitHub Pages will always use its own deployed version of pages-gem 
# This means GitHub Pages will NOT use your Gemfile.lock and therefore it is
# counterproductive to check this file into the repository.
# Details at https://github.com/github/pages-gem/issues/768
Gemfile.lock

.env
.idea
photos
</file>

<file path="docker-compose.yml">
version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION:-us-east-1}"
      S3_BUCKET: "${S3_BUCKET}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      DATABASE_URL: "${DATABASE_URL:-sqlite:///data/photos.db}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    volumes:
      - db_data:/data                    # keeps the SQLite file persistent
    ports:
      - "8000:8000"                      # http://localhost:8000
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  frontend:
    build: ./site
    ports:
      - "3000:80"                        # http://localhost:3000
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  db_data:
</file>

<file path="site/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Photo Gallery</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body>
    <noscript>You need JavaScript enabled to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

</files>
